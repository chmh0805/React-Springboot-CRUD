package com.cos.book.web;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.put;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

import java.util.ArrayList;
import java.util.List;

import javax.persistence.EntityManager;

import org.hamcrest.Matchers;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.context.SpringBootTest.WebEnvironment;
import org.springframework.http.MediaType;
import org.springframework.test.context.web.WebAppConfiguration;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;
import org.springframework.test.web.servlet.ResultActions;
import org.springframework.test.web.servlet.result.MockMvcResultHandlers;
import org.springframework.transaction.annotation.Transactional;

import com.cos.book.domain.Book;
import com.cos.book.domain.BookRepository;
import com.fasterxml.jackson.databind.ObjectMapper;

import lombok.extern.slf4j.Slf4j;

/* 통합 테스트 (모든 Bean들을 똑같이 IoC에 올리고 테스트하는 것)
 * WebEnvironment.MOCK : 실제 tomcat을 올리는 것이 아니라, 모의 web 환경에서 test
 * WebEnvironment.RANDOM_PORT : 실제 tomcat 서버로 Test (랜덤 port로 실행)
 * @AutoConfigureMockMvc : MockMvc를 IoC에 등록해줌.
 * @Transactional : 각각 테스트 함수가 종료될 때마다 트랜잭션을 rollback 해주는 어노테이션
 */

@Slf4j
@WebAppConfiguration
@Transactional
@AutoConfigureMockMvc
@SpringBootTest(webEnvironment = WebEnvironment.MOCK)
public class BookControllerIntegrateTest {
	
	@Autowired
	private MockMvc mockMvc;
	
	@Autowired
	private BookRepository bookRepository;

	@Autowired
	private EntityManager entityManager;
	
	@BeforeEach // 각각의 Test가 실행되기 직전에 호출되는 어노테이션
	public void init() {
		// Test 실행 전마다 id값 초기화
		entityManager.createNativeQuery("ALTER TABLE book AUTO_INCREMENT = 1").executeUpdate();
	}
	
	// BDDMockito 패턴
		@Test
		public void save_테스트() throws Exception {
			// given (테스트를 하기 위한 준비)
			Book book = new Book(null, "스프링 따라하기", "코스");
			String content = new ObjectMapper().writeValueAsString(book);
			
			// when (테스트 실행)
			ResultActions resultAction = mockMvc.perform(post("/book")
					.contentType(MediaType.APPLICATION_JSON_UTF8)
					.content(content)
					.accept(MediaType.APPLICATION_JSON_UTF8));
			
			// then (검증)
			resultAction
				.andExpect(status().isCreated())
				.andExpect(jsonPath("$.title").value("스프링 따라하기"))
				.andDo(MockMvcResultHandlers.print());
		}
		
		@Test
		public void findAll_테스트() throws Exception {
			// given
			List<Book> books = new ArrayList<>();
			books.add(new Book(null, "스프링부트 따라하기", "혁"));
			books.add(new Book(null,"리액트 따라하기", "혁"));
			books.add(new Book(null,"JUnit 따라하기", "혁"));
			
			 bookRepository.saveAll(books);
			
			// when
			ResultActions resultAction = mockMvc.perform(get("/book")
					.accept(MediaType.APPLICATION_JSON_UTF8));
			
			// then
			resultAction
				.andExpect(status().isOk())
				.andExpect(jsonPath("$", Matchers.hasSize(3)))
				.andExpect(jsonPath("$[2].title").value("JUnit 따라하기"))
				.andDo(MockMvcResultHandlers.print());
		}
		
		@Test
		public void findById_테스트() throws Exception {
			// given
			bookRepository.save(new Book(null, "스프링부트 따라하기", "혁"));
			
			// when
			ResultActions resultAction = mockMvc.perform(get("/book/1")
					.accept(MediaType.APPLICATION_JSON_UTF8));
			
			// then
			resultAction
				.andExpect(status().isOk())
				.andExpect(jsonPath("$").value(new Book(1L, "스프링부트 따라하기", "혁")))
				.andDo(MockMvcResultHandlers.print());
		}
		
		@Test
		public void update_테스트() throws Exception {
			// given (테스트를 하기 위한 준비)
			List<Book> books = new ArrayList<>();
			books.add(new Book(null, "스프링부트 따라하기", "혁"));
			books.add(new Book(null,"리액트 따라하기", "혁"));
			books.add(new Book(null,"JUnit 따라하기", "혁"));
			
			bookRepository.saveAll(books);
			
			Long id = 1L;
			Book book = new Book(null, "C++ 따라하기", "코스");
			String content = new ObjectMapper().writeValueAsString(book);
			
			// when (테스트 실행)
			ResultActions resultAction = mockMvc.perform(put("/book/{id}", id)
					.contentType(MediaType.APPLICATION_JSON_UTF8)
					.content(content)
					.accept(MediaType.APPLICATION_JSON_UTF8));
			
			// then (검증)
			resultAction
				.andExpect(status().isOk())
				.andExpect(jsonPath("$.title").value("C++ 따라하기"))
				.andDo(MockMvcResultHandlers.print());
		}
		
		@Test
		public void delete_테스트() throws Exception {
			// given (테스트를 하기 위한 준비)
			Long id = 1L;
			
			Book book = new Book(null, "스프링부트 따라하기", "혁");
			bookRepository.save(book);
			
			// when (테스트 실행)
			ResultActions resultAction = mockMvc.perform(delete("/book/{id}", id)
					.accept(MediaType.TEXT_PLAIN));
			
			// then (검증)
			resultAction
				.andExpect(status().isOk())
				.andDo(MockMvcResultHandlers.print());
			
			MvcResult requestResult = resultAction.andReturn();
			String result = requestResult.getResponse().getContentAsString();
			assertEquals(result, "ok");
		}
}
